{"version":3,"sources":["utils/GlobalState.js","languages/polish.js","languages/english.js","languages/french.js","components/StartScreen.js","components/GameTable.js","components/GameToolbar.js","components/GameScreen.js","components/GameOverScreen.js","components/RankingScreen.js","components/App.js","components/ServerList.js","serviceWorker.js","index.js"],"names":["GlobalContext","createContext","languages","polish","title","instruction","startButton","languageButton","settings","name","border","noBorder","toolbar","pauseTooltip","settingsTooltip","score","ranking","english","french","GlobalStateProvider","children","useState","borders","setBorders","currentLanguage","setCurrentLanguage","Provider","value","language","useGlobalState","useContext","useStyles","makeStyles","main","margin","display","flexShrink","flexDirection","color","StartScreen","startGame","classes","menuOpen","setMenuOpen","languageButtonRef","useRef","className","Typography","variant","Button","onClick","ref","Menu","open","Boolean","onClose","anchorEl","current","MenuItem","ListItemIcon","code","height","ListItemText","primary","GameTable","grid","style","borderSpacing","map","row","width","backgroundColor","header","alignItems","appBar","red","GameToolbar","pause","setPause","snakeSpeed","setSnakeSpeed","dialogOpen","setDialogOpen","globalState","keyPress","event","key","oldValue","useEffect","document","addEventListener","removeEventListener","AppBar","position","Toolbar","Grid","container","spacing","justify","item","xs","Slider","onChange","sliderValue","valueLabelDisplay","min","max","german","Tooltip","IconButton","Settings","oldPause","PlayArrow","Pause","Dialog","fullWidth","maxWidth","DialogTitle","DialogContent","FormControlLabel","control","Switch","checked","target","label","colors","snake","apple","lightGreen","GameScreen","gameOver","setGrid","head","snakeGrid","direction","snakeLength","gameTick","length","shift","oldGrid","gridCopy","i","j","Math","floor","random","temp","push","tempGrid","snakeRow","handle","setInterval","clearInterval","wrapper","textAlign","GameOverScreen","endGame","showRanking","username","setUsername","showTextField","setShowTextField","TextField","onKeyDown","JSON","parse","localStorage","getItem","setItem","stringify","saveScore","RankingScreen","startGameAgain","dataTable","sort","a","b","align","TableContainer","Table","TableHead","TableRow","TableCell","TableBody","theme","padding","createMuiTheme","palette","secondary","grey","App","currentScreen","setCurrentScreen","setScore","console","log","ThemeProvider","CssBaseline","realScore","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.a2bffc17.chunk.js","sourcesContent":["import React, { createContext, useContext, useState } from \"react\";\nimport { polish, french, english } from \"../languages\";\n\nconst GlobalContext = createContext(\"test\");\n\n// Provider\n// Consumer\n\n// <GlobalStateProvider> <App /></>\n\n/*\n\n<Context1>\n    value1={}\n    <Context2>\n        value2\n        App\n    </Context2>\n</Context1>\n\nvalue1=\"test\"\n\n*/\n\nconst languages = {\n    polish,\n    english,\n    french,\n};\n\nfunction GlobalStateProvider({ children }) {\n    const [borders, setBorders] = useState(true);\n    const [currentLanguage, setCurrentLanguage] = useState(\"english\");\n\n    return (\n        <GlobalContext.Provider\n            value={{\n                settings: {\n                    borders,\n                    setBorders,\n                },\n                language: languages[currentLanguage],\n                setCurrentLanguage,\n                currentLanguage,\n            }}\n        >\n            {children}\n        </GlobalContext.Provider>\n    );\n}\n\nfunction useGlobalState() {\n    const context = useContext(GlobalContext);\n    return context;\n}\n\nexport { GlobalContext, GlobalStateProvider, useGlobalState };\n","export default {\n    title: {\n        instruction: \"Instrukcja (już niedługo)\",\n        startButton: \"Rozpocznij grę\",\n        languageButton: \"Wybierz język\",\n    },\n    settings: {\n        name: \"Ustawnienia\",\n        border: \"Ramka\",\n        noBorder: \"Brak ramki\",\n    },\n    toolbar: {\n        pauseTooltip: \"Pauza, skrót: p\",\n        settingsTooltip: \"Ustawienia, skrót: s\",\n        score: \"Twój wynik: \",\n    },\n    ranking: {},\n};\n","export default {\n    title: {\n        instruction: \"Instruction (soon)\",\n        startButton: \"Start game\",\n        languageButton: \"Choose language\",\n    },\n    settings: {\n        name: \"Settings\",\n        border: \"Border\",\n        noBorder: \"No border\",\n    },\n    toolbar: {\n        pauseTooltip: \"Pause, shortcut: p\",\n        settingsTooltip: \"Settings, shortcut: s\",\n        score: \"Your score: \",\n    },\n    ranking: {},\n};\n","export default {\n    title: {\n        instruction: \"L'instruction (bientôt)\",\n        startButton: \"Jouer\",\n        languageButton: \"Choisir une langue\",\n    },\n    settings: {\n        name: \"Réglage\",\n        border: \"Cadre\",\n        noBorder: \"Sans cadre\",\n    },\n    toolbar: {\n        pauseTooltip: \"Pause, abrév.: p\",\n        settingsTooltip: \"Réglage, abrév.: s\",\n        score: \"Ton score: \",\n    },\n    ranking: {},\n};\n","import React, { useEffect, useState, useRef } from \"react\";\r\nimport {\r\n    Typography,\r\n    makeStyles,\r\n    CssBaseline,\r\n    Button,\r\n    Menu,\r\n    MenuItem,\r\n    ListItemIcon,\r\n    ListItemText,\r\n} from \"@material-ui/core\";\r\nimport { useGlobalState } from \"../utils/GlobalState\";\r\nimport Flag from \"react-world-flags\";\r\n\r\nconst useStyles = makeStyles({\r\n    main: {\r\n        margin: \"auto\",\r\n        display: \"flex\",\r\n        flexShrink: 1,\r\n        flexDirection: \"column\",\r\n    },\r\n    title: {\r\n        color: \"red\",\r\n    },\r\n});\r\n\r\nfunction StartScreen({ startGame }) {\r\n    const classes = useStyles();\r\n    const { language } = useGlobalState();\r\n    const [menuOpen, setMenuOpen] = useState(false);\r\n    const { setCurrentLanguage } = useGlobalState(\"wartoscdomyslna?\");\r\n\r\n    const languageButtonRef = useRef();\r\n\r\n    function openMenu() {\r\n        setMenuOpen(true);\r\n    }\r\n    function closeMenu() {\r\n        setMenuOpen(false);\r\n    }\r\n    return (\r\n        <div className={classes.main}>\r\n            <Typography variant=\"h1\" className={classes.title}>\r\n                Snake\r\n            </Typography>\r\n\r\n            <Button variant=\"contained\" onClick={startGame}>\r\n                {language.title.startButton}\r\n            </Button>\r\n\r\n            <Button\r\n                variant=\"contained\"\r\n                onClick={() => {\r\n                    //zrób instrukcję\r\n                }}\r\n            >\r\n                {language.title.instruction}\r\n            </Button>\r\n\r\n            <Button\r\n                variant=\"contained\"\r\n                onClick={openMenu}\r\n                ref={languageButtonRef}\r\n            >\r\n                {language.title.languageButton}\r\n            </Button>\r\n            <Menu\r\n                //menuOpen={menuOpen}\r\n                open={Boolean(menuOpen)}\r\n                onClose={closeMenu}\r\n                anchorEl={languageButtonRef.current}\r\n                //size=\"m\"\r\n            >\r\n                <MenuItem\r\n                    onClick={() => {\r\n                        setCurrentLanguage(\"polish\");\r\n                        setMenuOpen(false);\r\n                    }}\r\n                >\r\n                    <ListItemIcon>\r\n                        <Flag code=\"pol\" height=\"12\" />\r\n                    </ListItemIcon>\r\n                    <ListItemText primary=\"Polski\" />\r\n                </MenuItem>\r\n                <MenuItem\r\n                    onClick={() => {\r\n                        setCurrentLanguage(\"english\");\r\n                        setMenuOpen(false);\r\n                    }}\r\n                >\r\n                    <ListItemIcon>\r\n                        <Flag code=\"gbr\" height=\"12\" />\r\n                    </ListItemIcon>\r\n                    <ListItemText primary=\"English\" />\r\n                </MenuItem>\r\n                <MenuItem\r\n                    onClick={() => {\r\n                        setCurrentLanguage(\"french\");\r\n                        setMenuOpen(false);\r\n                    }}\r\n                >\r\n                    <ListItemIcon>\r\n                        <Flag code=\"fra\" height=\"12\" />\r\n                    </ListItemIcon>\r\n                    <ListItemText primary=\"Français\" />\r\n                </MenuItem>\r\n            </Menu>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default StartScreen;\r\n","import React from \"react\";\r\nimport { makeStyles } from \"@material-ui/core\";\r\nimport { useGlobalState } from \"../utils/GlobalState\";\r\n\r\nconst useStyles = makeStyles({});\r\n\r\nfunction GameTable({ grid }) {\r\n    const classes = useStyles();\r\n\r\n    const globalState = useGlobalState();\r\n    const borders = globalState.settings.borders;\r\n\r\n    return (\r\n        <div>\r\n            <table\r\n                style={{\r\n                    borderSpacing: borders === true ? \"1px\" : \"0px\",\r\n                }}\r\n            >\r\n                <tbody>\r\n                    {grid.map((row) => (\r\n                        <tr>\r\n                            {row.map((color) => (\r\n                                <td\r\n                                    style={{\r\n                                        height: 30,\r\n                                        width: 30,\r\n                                        backgroundColor: color,\r\n                                    }}\r\n                                />\r\n                            ))}\r\n                        </tr>\r\n                    ))}\r\n                </tbody>\r\n            </table>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default GameTable;\r\n","import React, { useState, useEffect } from \"react\";\nimport {\n    makeStyles,\n    Typography,\n    IconButton,\n    Toolbar,\n    AppBar,\n    Tooltip,\n    Slider,\n    Grid,\n    Dialog,\n    DialogTitle,\n    DialogContent,\n    Switch,\n    FormControlLabel,\n} from \"@material-ui/core\";\nimport { PlayArrow, Pause, Settings } from \"@material-ui/icons\";\nimport { red } from \"@material-ui/core/colors\";\nimport { useGlobalState } from \"../utils/GlobalState\";\nimport Flag from \"react-world-flags\";\n\nconst useStyles = makeStyles({\n    header: {\n        display: \"flex\",\n        flexDirection: \"row\",\n        alignItems: \"center\",\n    },\n    appBar: {\n        backgroundColor: red[900],\n    },\n});\n\nfunction GameToolbar({ pause, setPause, snakeSpeed, setSnakeSpeed, score }) {\n    const classes = useStyles();\n    const { language } = useGlobalState();\n\n    const [dialogOpen, setDialogOpen] = useState(false);\n\n    const globalState = useGlobalState();\n    const borders = globalState.settings.borders;\n    const setBorders = globalState.settings.setBorders;\n\n    useEffect(() => {\n        document.addEventListener(\"keydown\", keyPress);\n\n        return () => {\n            document.removeEventListener(\"keydown\", keyPress);\n        };\n    }, []);\n\n    function keyPress(event) {\n        if (event.key === \"s\") {\n            setDialogOpen((oldValue) => {\n                setPause(!oldValue);\n                return !oldValue;\n            });\n        }\n        if (event.key === \"p\") {\n            setDialogOpen(false);\n        }\n    }\n\n    return (\n        <>\n            <AppBar position=\"static\" className={classes.appBar}>\n                <Toolbar className={classes.header}>\n                    <Grid\n                        container\n                        spacing={2}\n                        justify=\"space-between\"\n                        alignItems=\"center\"\n                    >\n                        <Grid item>\n                            <Typography variant=\"h6\">\n                                {language.toolbar.score}\n                                {score}\n                            </Typography>\n                        </Grid>\n                        <Grid item xs={6}>\n                            <Slider\n                                value={snakeSpeed}\n                                onChange={(event, sliderValue) =>\n                                    setSnakeSpeed(sliderValue)\n                                }\n                                valueLabelDisplay=\"auto\"\n                                min={30}\n                                max={500}\n                            />\n                        </Grid>\n                        <Grid item>\n                            <Flag\n                                code={\n                                    {\n                                        polish: \"pol\",\n                                        english: \"gbr\",\n                                        french: \"fra\",\n                                        german: \"ger\",\n                                    }[globalState.currentLanguage]\n                                }\n                                height=\"16\"\n                            />\n                        </Grid>\n                        <Grid item>\n                            <Tooltip title={language.toolbar.settingsTooltip}>\n                                <IconButton\n                                    color=\"inherit\"\n                                    onClick={() => {\n                                        setDialogOpen(true);\n                                        setPause(true);\n                                    }}\n                                >\n                                    <Settings />\n                                </IconButton>\n                            </Tooltip>\n                            <Tooltip title={language.toolbar.pauseTooltip}>\n                                <IconButton\n                                    onClick={() =>\n                                        setPause((oldPause) => !oldPause)\n                                    }\n                                    color=\"inherit\"\n                                >\n                                    {pause ? <PlayArrow /> : <Pause />}\n                                </IconButton>\n                            </Tooltip>\n                        </Grid>\n                    </Grid>\n                </Toolbar>\n            </AppBar>\n\n            <Dialog\n                open={dialogOpen}\n                onClose={() => {\n                    setDialogOpen(false);\n                    setPause(false);\n                }}\n                fullWidth\n                maxWidth=\"sm\"\n            >\n                <DialogTitle>{language.settings.name}</DialogTitle>\n                <DialogContent>\n                    <FormControlLabel\n                        control={\n                            <Switch\n                                checked={borders}\n                                onChange={(event) => {\n                                    setBorders(event.target.checked);\n                                }}\n                            />\n                        }\n                        label={\n                            borders === true\n                                ? language.settings.border\n                                : language.settings.noBorder\n                        }\n                    />\n                </DialogContent>\n            </Dialog>\n        </>\n    );\n}\n\nexport default GameToolbar;\n","import React, { useEffect, useState, useRef } from \"react\";\r\nimport { makeStyles } from \"@material-ui/core\";\r\nimport GameTable from \"./GameTable\";\r\nimport GameToolbar from \"./GameToolbar\";\r\nimport { red, lightGreen } from \"@material-ui/core/colors\";\r\n\r\nconst useStyles = makeStyles({\r\n    main: {\r\n        margin: \"auto\",\r\n    },\r\n});\r\n\r\nconst colors = {\r\n    snake: red[500],\r\n    apple: lightGreen[400],\r\n    grid: \"lightgrey\",\r\n};\r\n\r\nfunction GameScreen({ gameOver, snakeSpeed, setSnakeSpeed }) {\r\n    const classes = useStyles();\r\n    const height = 20;\r\n    const width = 40;\r\n    const [grid, setGrid] = useState([]);\r\n\r\n    const head = useRef([0, 0]);\r\n    const snakeGrid = useRef([]);\r\n    const direction = useRef([0]);\r\n    const snakeLength = useRef(4);\r\n    const apple = useRef([0, 0]);\r\n    const [pause, setPause] = useState(false); //false - nie ma pauzy true-jest pauza\r\n\r\n    useEffect(() => {\r\n        apple.current[0] = Math.floor(Math.random() * height);\r\n        apple.current[1] = Math.floor(Math.random() * width);\r\n\r\n        const tempGrid = [];\r\n        snakeGrid.current = [];\r\n        for (let i = 0; i < height; i++) {\r\n            const row = [];\r\n            const snakeRow = [];\r\n            for (let j = 0; j < width; j++) {\r\n                if (i === apple.current[0] && j === apple.current[1])\r\n                    row.push(colors.apple);\r\n                else row.push(colors.grid);\r\n                snakeRow.push(0);\r\n            }\r\n            tempGrid.push(row);\r\n            snakeGrid.current.push(snakeRow);\r\n        }\r\n        setGrid(tempGrid);\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        let handle;\r\n        if (pause === false) handle = setInterval(gameTick, snakeSpeed);\r\n\r\n        return () => {\r\n            clearInterval(handle);\r\n        };\r\n    }, [pause, snakeSpeed]);\r\n\r\n    useEffect(() => {\r\n        document.addEventListener(\"keydown\", keyPress);\r\n\r\n        return () => {\r\n            document.removeEventListener(\"keydown\", keyPress);\r\n        };\r\n    }, []);\r\n\r\n    function gameTick() {\r\n        if (direction.current.length > 1) direction.current.shift();\r\n        switch (direction.current[0]) {\r\n            case 0: //w prawo\r\n                head.current[1]++;\r\n                break;\r\n            case 1: //w gore\r\n                head.current[0]--;\r\n                break;\r\n            case 2: //w lewo\r\n                head.current[1]--;\r\n                break;\r\n            case 3: //w dol\r\n                head.current[0]++;\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n\r\n        head.current[0] += height;\r\n        head.current[0] %= height;\r\n\r\n        head.current[1] += width;\r\n        head.current[1] %= width;\r\n\r\n        if (snakeGrid.current[head.current[0]][head.current[1]] !== 0) {\r\n            gameOver(snakeLength.current);\r\n        } else {\r\n            setGrid((oldGrid) => {\r\n                const gridCopy = [...oldGrid];\r\n\r\n                for (let i = 0; i < height; i++) {\r\n                    for (let j = 0; j < width; j++) {\r\n                        if (snakeGrid.current[i][j] !== 0) {\r\n                            --snakeGrid.current[i][j];\r\n                            if (snakeGrid.current[i][j] === 0) {\r\n                                gridCopy[i] = [...oldGrid[i]];\r\n                                gridCopy[i][j] = colors.grid;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n\r\n                snakeGrid.current[head.current[0]][head.current[1]] =\r\n                    snakeLength.current;\r\n\r\n                if (\r\n                    head.current[0] === apple.current[0] &&\r\n                    head.current[1] === apple.current[1]\r\n                ) {\r\n                    snakeLength.current++;\r\n\r\n                    if (snakeLength.current < height * width) {\r\n                        do {\r\n                            apple.current[0] = Math.floor(\r\n                                Math.random() * height\r\n                            );\r\n                            apple.current[1] = Math.floor(\r\n                                Math.random() * width\r\n                            );\r\n                        } while (\r\n                            snakeGrid.current[apple.current[0]][\r\n                                apple.current[1]\r\n                            ] !== 0\r\n                        );\r\n\r\n                        gridCopy[apple.current[0]] = [\r\n                            ...gridCopy[apple.current[0]],\r\n                        ];\r\n                        gridCopy[apple.current[0]][apple.current[1]] =\r\n                            colors.apple;\r\n                    } else {\r\n                        apple.current = [-1, -1];\r\n                    }\r\n                }\r\n\r\n                gridCopy[head.current[0]] = [...gridCopy[head.current[0]]];\r\n                gridCopy[head.current[0]][head.current[1]] = colors.snake;\r\n\r\n                return gridCopy;\r\n            });\r\n        }\r\n    }\r\n\r\n    function keyPress(event) {\r\n        let temp = direction.current[direction.current.length - 1];\r\n        switch (event.key) {\r\n            case \"ArrowRight\":\r\n                if (temp !== 2) direction.current.push(0);\r\n                break;\r\n            case \"ArrowUp\":\r\n                if (temp !== 3) direction.current.push(1);\r\n                break;\r\n            case \"ArrowLeft\":\r\n                if (temp !== 0) direction.current.push(2);\r\n                break;\r\n            case \"ArrowDown\":\r\n                if (temp !== 1) direction.current.push(3);\r\n                break;\r\n            case \"p\":\r\n                setPause((oldPause) => !oldPause);\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n    /*function changePause() {\r\n        setPause((oldPause) => (oldPause === 1 ? 0 : 1));\r\n    }*/\r\n\r\n    return (\r\n        <div className={classes.main}>\r\n            <GameToolbar\r\n                pause={pause}\r\n                setPause={setPause}\r\n                snakeSpeed={snakeSpeed}\r\n                setSnakeSpeed={setSnakeSpeed}\r\n                score={snakeLength.current}\r\n            />\r\n            <GameTable grid={grid} />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default GameScreen;\r\n","import React, { useState } from \"react\";\nimport { Typography, makeStyles, Button, TextField } from \"@material-ui/core\";\n\nconst useStyles = makeStyles({\n    wrapper: {\n        width: \"100vw\",\n        height: \"100vh\",\n\n        display: \"flex\",\n        flexDirection: \"column\",\n    },\n    main: {\n        margin: \"auto\",\n\n        display: \"flex\",\n        flexShrink: 1,\n        flexDirection: \"column\",\n\n        textAlign: \"center\",\n    },\n    title: {\n        color: \"red\",\n    },\n});\n\nfunction GameOverScreen({ score, endGame, showRanking, snakeSpeed }) {\n    const classes = useStyles();\n    const [username, setUsername] = useState(\"\");\n    const [showTextField, setShowTextField] = useState(true);\n\n    const saveScore = () => {\n        setShowTextField(false);\n\n        const ranking = JSON.parse(localStorage.getItem(\"ranking\") || \"[]\");\n        ranking.push({ name: username, score, snakeSpeed });\n        localStorage.setItem(\"ranking\", JSON.stringify(ranking));\n\n        showRanking();\n    };\n\n    return (\n        <div className={classes.main}>\n            <Typography variant=\"h1\" className={classes.title}>\n                You lost!\n            </Typography>\n            <Button variant=\"contained\" onClick={endGame}>\n                Play again\n            </Button>\n            <Button variant=\"contained\" onClick={showRanking}>\n                Best scores\n            </Button>\n\n            <Typography>Your score is {score}</Typography>\n\n            {showTextField && (\n                <TextField\n                    label=\"Your name\"\n                    variant=\"outlined\"\n                    value={username}\n                    onChange={(event) => setUsername(event.target.value)}\n                    onKeyDown={(event) => event.key === \"Enter\" && saveScore()}\n                />\n            )}\n        </div>\n    );\n}\n\nexport default GameOverScreen;\n","import React from \"react\";\r\nimport {\r\n    Typography,\r\n    makeStyles,\r\n    CssBaseline,\r\n    Button,\r\n    TableRow,\r\n    TableHead,\r\n    TableContainer,\r\n    Table,\r\n    TableCell,\r\n    TableBody,\r\n} from \"@material-ui/core\";\r\n\r\nfunction RankingScreen({ startGameAgain }) {\r\n    const dataTable = JSON.parse(localStorage.getItem(\"ranking\") || \"[]\");\r\n    /*[\r\n        { name: \"Adam\", score: 75 },\r\n        { name: \"Monika\", score: 101 },\r\n        { name: \"Zosia\", score: 72 },\r\n    ];*/\r\n\r\n    dataTable.sort((a, b) => b.score - a.score);\r\n\r\n    return (\r\n        <div>\r\n            <div align=\"center\">\r\n                <Button variant=\"contained\" onClick={startGameAgain}>\r\n                    Play again\r\n                </Button>\r\n            </div>\r\n            <TableContainer>\r\n                <Table>\r\n                    <TableHead>\r\n                        <TableRow>\r\n                            <TableCell>Ranking</TableCell>\r\n                            <TableCell>Username</TableCell>\r\n                            <TableCell>Best score</TableCell>\r\n                            <TableCell>Your speed</TableCell>\r\n                        </TableRow>\r\n                    </TableHead>\r\n                    <TableBody>\r\n                        {dataTable.map(({ name, score, snakeSpeed }) => (\r\n                            <TableRow>\r\n                                <TableCell></TableCell>\r\n                                <TableCell>{name}</TableCell>\r\n                                <TableCell>{score}</TableCell>\r\n                                <TableCell>{snakeSpeed}</TableCell>\r\n                            </TableRow>\r\n                        ))}\r\n                    </TableBody>\r\n                </Table>\r\n            </TableContainer>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default RankingScreen;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport {\r\n    makeStyles,\r\n    CssBaseline,\r\n    createMuiTheme,\r\n    ThemeProvider,\r\n} from \"@material-ui/core\";\r\nimport { red, grey } from \"@material-ui/core/colors\";\r\nimport StartScreen from \"./StartScreen\";\r\nimport GameScreen from \"./GameScreen\";\r\nimport GameOverScreen from \"./GameOverScreen\";\r\nimport RankingScreen from \"./RankingScreen\";\r\nimport ServerList from \"./ServerList\";\r\n\r\nimport { useGlobalState } from \"../utils/GlobalState\";\r\n\r\nconst theme = createMuiTheme({\r\n    palette: {\r\n        primary: red,\r\n        secondary: grey,\r\n    },\r\n});\r\n\r\nconst useStyles = makeStyles({\r\n    wrapper: {\r\n        width: \"100vw\",\r\n        height: \"100vh\",\r\n\r\n        display: \"flex\",\r\n        flexDirection: \"column\",\r\n    },\r\n});\r\n\r\nfunction App() {\r\n    const classes = useStyles();\r\n    const [currentScreen, setCurrentScreen] = useState(\"startScreen\");\r\n    //const [currentScreen, setCurrentScreen] = useState(\"startScreen\");\r\n    const [score, setScore] = useState(-1);\r\n    const [snakeSpeed, setSnakeSpeed] = useState(200);\r\n    const { setCurrentLanguage } = useGlobalState();\r\n\r\n    useEffect(() => {\r\n        document.addEventListener(\"keydown\", keyPress);\r\n\r\n        return () => {\r\n            document.removeEventListener(\"keydown\", keyPress);\r\n        };\r\n    }, []);\r\n\r\n    function keyPress(event) {\r\n        console.log(event.key);\r\n        switch (event.key) {\r\n            case \"f\":\r\n                setCurrentLanguage(\"french\");\r\n                break;\r\n            case \"l\":\r\n                setCurrentLanguage(\"polish\");\r\n                break;\r\n            case \"e\":\r\n                setCurrentLanguage(\"english\");\r\n                break;\r\n        }\r\n    }\r\n\r\n    return (\r\n        <ThemeProvider theme={theme}>\r\n            <div className={classes.wrapper}>\r\n                <CssBaseline />\r\n                {currentScreen === \"startScreen\" && (\r\n                    <StartScreen\r\n                        startGame={() => setCurrentScreen(\"gameScreen\")}\r\n                    />\r\n                )}\r\n                {currentScreen === \"gameScreen\" && (\r\n                    <GameScreen\r\n                        gameOver={(realScore) => {\r\n                            setScore(realScore);\r\n                            setCurrentScreen(\"gameOverScreen\");\r\n                        }}\r\n                        snakeSpeed={snakeSpeed}\r\n                        setSnakeSpeed={setSnakeSpeed}\r\n                    />\r\n                )}\r\n                {currentScreen === \"gameOverScreen\" && (\r\n                    <GameOverScreen\r\n                        score={score}\r\n                        endGame={() => {\r\n                            setCurrentScreen(\"gameScreen\");\r\n                            setSnakeSpeed(200);\r\n                        }}\r\n                        showRanking={() => setCurrentScreen(\"rankingScreen\")}\r\n                        snakeSpeed={snakeSpeed}\r\n                    />\r\n                )}\r\n                {currentScreen === \"rankingScreen\" && (\r\n                    <RankingScreen\r\n                        startGameAgain={() => setCurrentScreen(\"gameScreen\")}\r\n                    />\r\n                )}\r\n                {/*currentScreen === \"serverList\" && <ServerList />*/}\r\n            </div>\r\n        </ThemeProvider>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import React, { useRef, useEffect, useState } from \"react\";\nimport { makeStyles, Paper } from \"@material-ui/core\";\n\nconst useStyles = makeStyles({\n    main: {\n        margin: \"auto\",\n        display: \"flex\",\n        flexShrink: 1,\n        flexDirection: \"column\",\n\n        padding: 8,\n    },\n});\n\nconst ServerList = () => {\n    const classes = useStyles();\n    const socket = useRef();\n\n    const [gameOverview, setGameOverview] = useState(null);\n\n    useEffect(() => {\n        socket.current = new WebSocket(\"ws://localhost:5000/gameOverview\");\n        socket.current.addEventListener(\"message\", (message) => {\n            const { type, value } = JSON.parse(message.data);\n            console.log(type, value);\n            switch (type) {\n                case \"clientId\":\n                    break;\n                case \"stateUpdate\":\n                    setGameOverview(value);\n                    break;\n            }\n        });\n\n        return () => {\n            socket.current.close();\n        };\n    }, []);\n\n    return (\n        <Paper className={classes.main}>\n            {gameOverview === null ? (\n                \"Loading...\"\n            ) : (\n                <ul>\n                    {Object.values(gameOverview).map(\n                        ({ name, playerCount }) => (\n                            <li>\n                                {name}, {playerCount}\n                            </li>\n                        )\n                    )}\n                </ul>\n            )}\n            {/*<button onClick={testServer}>Click</button>*/}\n        </Paper>\n    );\n};\n\nexport default ServerList;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./components/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nimport { GlobalStateProvider } from \"./utils/GlobalState\";\n\nReactDOM.render(\n    <GlobalStateProvider>\n        <App />\n    </GlobalStateProvider>,\n    document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}