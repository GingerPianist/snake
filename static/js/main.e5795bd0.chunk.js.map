{"version":3,"sources":["components/StartScreen.js","components/GameTable.js","components/GameScreen.js","components/GameOverScreen.js","components/RankingScreen.js","components/App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","wrapper","width","height","display","flexDirection","main","margin","flexShrink","title","color","StartScreen","startGame","classes","className","Typography","variant","Button","onClick","GameTable","grid","map","row","style","backgroundColor","header","alignItems","grow","flexGrow","appBar","red","colors","snake","apple","lightGreen","GameScreen","gameOver","snakeSpeed","setSnakeSpeed","useState","setGrid","head","useRef","snakeGrid","direction","snakeLength","pause","setPause","gameTick","current","length","shift","oldGrid","gridCopy","i","j","Math","floor","random","keyPress","event","temp","key","push","changePause","oldPause","useEffect","tempGrid","snakeRow","handle","setInterval","clearInterval","document","addEventListener","removeEventListener","AppBar","position","Toolbar","Grid","container","spacing","justify","item","xs","Slider","value","onChange","sliderValue","valueLabelDisplay","min","max","Tooltip","IconButton","PlayArrow","Pause","textAlign","GameOverScreen","score","endGame","showRanking","username","setUsername","showTextField","setShowTextField","TextField","label","target","onKeyDown","ranking","JSON","parse","localStorage","getItem","name","setItem","stringify","saveScore","RankingScreen","startGameAgain","dataTable","sort","a","b","align","TableContainer","Table","TableHead","TableRow","TableCell","TableBody","theme","createMuiTheme","palette","primary","secondary","grey","App","currentScreen","setCurrentScreen","setScore","ThemeProvider","CssBaseline","realScore","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.e5795bd0.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Typography, makeStyles, CssBaseline, Button } from \"@material-ui/core\";\r\n\r\nconst useStyles = makeStyles({\r\n    wrapper: {\r\n        width: \"100vw\",\r\n        height: \"100vh\",\r\n\r\n        display: \"flex\",\r\n        flexDirection: \"column\",\r\n    },\r\n    main: {\r\n        margin: \"auto\",\r\n\r\n        display: \"flex\",\r\n        flexShrink: 1,\r\n        flexDirection: \"column\",\r\n    },\r\n    title: {\r\n        color: \"red\",\r\n    },\r\n});\r\n\r\nfunction StartScreen({ startGame }) {\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <div className={classes.main}>\r\n            <Typography variant=\"h1\" className={classes.title}>\r\n                Snake\r\n            </Typography>\r\n            <Button variant=\"contained\" onClick={startGame}>\r\n                Play Classic Snake\r\n            </Button>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default StartScreen;\r\n","import React from \"react\";\r\nimport { makeStyles } from \"@material-ui/core\";\r\n\r\nconst useStyles = makeStyles({});\r\n\r\nfunction GameTable({ grid }) {\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <div>\r\n            <table>\r\n                <tbody>\r\n                    {grid.map((row) => (\r\n                        <tr>\r\n                            {row.map((color) => (\r\n                                <td\r\n                                    style={{\r\n                                        height: 30,\r\n                                        width: 30,\r\n                                        backgroundColor: color,\r\n                                    }}\r\n                                />\r\n                            ))}\r\n                        </tr>\r\n                    ))}\r\n                </tbody>\r\n            </table>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default GameTable;\r\n","import React, { useEffect, useState, useRef } from \"react\";\r\nimport {\r\n    makeStyles,\r\n    Typography,\r\n    IconButton,\r\n    Toolbar,\r\n    AppBar,\r\n    Tooltip,\r\n    Slider,\r\n    Grid,\r\n} from \"@material-ui/core\";\r\nimport { PlayArrow, Pause } from \"@material-ui/icons\";\r\nimport GameTable from \"./GameTable\";\r\nimport { red, lightGreen } from \"@material-ui/core/colors\";\r\n\r\nconst useStyles = makeStyles({\r\n    main: {\r\n        margin: \"auto\",\r\n        //textAlign: \"center\",\r\n    },\r\n    header: {\r\n        display: \"flex\",\r\n        flexDirection: \"row\",\r\n        alignItems: \"center\",\r\n    },\r\n    grow: {\r\n        flexGrow: 1,\r\n    },\r\n    appBar: {\r\n        backgroundColor: red[900],\r\n    },\r\n});\r\n\r\nconst colors = {\r\n    snake: red[500],\r\n    apple: lightGreen[400],\r\n    grid: \"lightgrey\",\r\n};\r\n\r\nfunction GameScreen({ gameOver, snakeSpeed, setSnakeSpeed }) {\r\n    const classes = useStyles();\r\n    const height = 20;\r\n    const width = 40;\r\n    const [grid, setGrid] = useState([]);\r\n\r\n    const head = useRef([0, 0]);\r\n    const snakeGrid = useRef([]);\r\n    const direction = useRef([0]);\r\n    const snakeLength = useRef(4);\r\n    const apple = useRef([0, 0]);\r\n    const [pause, setPause] = useState(0); //0 - nie ma pauzy 1-jest pauza\r\n\r\n    useEffect(() => {\r\n        apple.current[0] = Math.floor(Math.random() * height);\r\n        apple.current[1] = Math.floor(Math.random() * width);\r\n\r\n        const tempGrid = [];\r\n        snakeGrid.current = [];\r\n        for (let i = 0; i < height; i++) {\r\n            const row = [];\r\n            const snakeRow = [];\r\n            for (let j = 0; j < width; j++) {\r\n                if (i === apple.current[0] && j === apple.current[1])\r\n                    row.push(colors.apple);\r\n                else row.push(colors.grid);\r\n                snakeRow.push(0);\r\n            }\r\n            tempGrid.push(row);\r\n            snakeGrid.current.push(snakeRow);\r\n        }\r\n        setGrid(tempGrid);\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        let handle;\r\n        if (pause === 0) handle = setInterval(gameTick, snakeSpeed);\r\n\r\n        return () => {\r\n            clearInterval(handle);\r\n        };\r\n    }, [pause, snakeSpeed]);\r\n\r\n    useEffect(() => {\r\n        document.addEventListener(\"keydown\", keyPress);\r\n\r\n        return () => {\r\n            document.removeEventListener(\"keydown\", keyPress);\r\n        };\r\n    }, []);\r\n\r\n    /*function setCell(row, column, color) {\r\n        //USUNĄĆ TĘ FUNKCJĘ I WŁOŻYĆ JĄ DO GAMETICKA!\r\n        const gridCopy = [...grid];\r\n        gridCopy[row] = [...gridCopy[row]]; //zmieniamy wskaznik do zmienionego wiersza tak, aby poinformowac Reacta o zmianie wartosci\r\n        gridCopy[row][column] = color;\r\n        setGrid(gridCopy);\r\n        console.log(row, column, color, gridCopy);\r\n    }*/\r\n\r\n    function gameTick() {\r\n        if (direction.current.length > 1) direction.current.shift();\r\n        switch (direction.current[0]) {\r\n            case 0: //w prawo\r\n                head.current[1]++;\r\n                break;\r\n            case 1: //w gore\r\n                head.current[0]--;\r\n                break;\r\n            case 2: //w lewo\r\n                head.current[1]--;\r\n                break;\r\n            case 3: //w dol\r\n                head.current[0]++;\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n\r\n        head.current[0] += height;\r\n        head.current[0] %= height;\r\n\r\n        head.current[1] += width;\r\n        head.current[1] %= width;\r\n\r\n        if (snakeGrid.current[head.current[0]][head.current[1]] !== 0) {\r\n            gameOver(snakeLength.current);\r\n        } else {\r\n            setGrid((oldGrid) => {\r\n                const gridCopy = [...oldGrid];\r\n\r\n                for (let i = 0; i < height; i++) {\r\n                    for (let j = 0; j < width; j++) {\r\n                        if (snakeGrid.current[i][j] !== 0) {\r\n                            --snakeGrid.current[i][j];\r\n                            if (snakeGrid.current[i][j] === 0) {\r\n                                gridCopy[i] = [...oldGrid[i]]; //zmieniamy wskaznik do zmienionego wiersza tak, aby poinformowac Reacta o zmianie wartosci\r\n                                gridCopy[i][j] = colors.grid;\r\n                                //setGrid(gridCopy);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n\r\n                /*\r\n                1) sprawdź czy głowa === jabłuszko\r\n                2) zwiększ długość\r\n                3) zrób nowe jabłuszko w miejscu gdzie nie ma węża\r\n                4) dodaj nowe jabłuszko\r\n                */\r\n\r\n                snakeGrid.current[head.current[0]][head.current[1]] =\r\n                    snakeLength.current;\r\n\r\n                if (\r\n                    head.current[0] === apple.current[0] &&\r\n                    head.current[1] === apple.current[1]\r\n                ) {\r\n                    snakeLength.current++;\r\n\r\n                    if (snakeLength.current < height * width) {\r\n                        do {\r\n                            apple.current[0] = Math.floor(\r\n                                Math.random() * height\r\n                            );\r\n                            apple.current[1] = Math.floor(\r\n                                Math.random() * width\r\n                            );\r\n                        } while (\r\n                            snakeGrid.current[apple.current[0]][\r\n                                apple.current[1]\r\n                            ] !== 0\r\n                        );\r\n\r\n                        gridCopy[apple.current[0]] = [\r\n                            ...gridCopy[apple.current[0]],\r\n                        ];\r\n                        gridCopy[apple.current[0]][apple.current[1]] =\r\n                            colors.apple;\r\n                    } else {\r\n                        apple.current = [-1, -1];\r\n                    }\r\n                }\r\n\r\n                //setCell(head.current[0], head.current[1], \"red\");\r\n                //const gridCopy = [...grid];\r\n                gridCopy[head.current[0]] = [...gridCopy[head.current[0]]]; //zmieniamy wskaznik do zmienionego wiersza tak, aby poinformowac Reacta o zmianie wartosci\r\n                gridCopy[head.current[0]][head.current[1]] = colors.snake;\r\n\r\n                return gridCopy;\r\n            });\r\n        }\r\n    }\r\n\r\n    function keyPress(event) {\r\n        let temp = direction.current[direction.current.length - 1];\r\n        switch (event.key) {\r\n            case \"ArrowRight\":\r\n                if (temp !== 2) direction.current.push(0);\r\n                break;\r\n            case \"ArrowUp\":\r\n                if (temp !== 3) direction.current.push(1);\r\n                break;\r\n            case \"ArrowLeft\":\r\n                if (temp !== 0) direction.current.push(2);\r\n                break;\r\n            case \"ArrowDown\":\r\n                if (temp !== 1) direction.current.push(3);\r\n                break;\r\n            case \"p\":\r\n                changePause();\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n    function changePause() {\r\n        setPause((oldPause) => (oldPause === 1 ? 0 : 1));\r\n    }\r\n\r\n    return (\r\n        <div className={classes.main}>\r\n            <AppBar position=\"static\" className={classes.appBar}>\r\n                <Toolbar className={classes.header}>\r\n                    <Grid\r\n                        container\r\n                        spacing={2}\r\n                        justify=\"space-between\"\r\n                        alignItems=\"center\"\r\n                    >\r\n                        <Grid item>\r\n                            <Typography variant=\"h6\">\r\n                                Your score is: {snakeLength.current}\r\n                            </Typography>\r\n                            {/* <div className={classes.grow}></div>*/}\r\n                        </Grid>\r\n                        <Grid item xs={6}>\r\n                            <Slider\r\n                                value={snakeSpeed}\r\n                                onChange={(event, sliderValue) =>\r\n                                    setSnakeSpeed(sliderValue)\r\n                                }\r\n                                valueLabelDisplay=\"auto\"\r\n                                min={30}\r\n                                max={500}\r\n                            />\r\n                        </Grid>\r\n                        <Grid item>\r\n                            <Tooltip title=\"keypress: p\">\r\n                                <IconButton\r\n                                    onClick={changePause}\r\n                                    color=\"inherit\"\r\n                                >\r\n                                    {pause === 1 ? <PlayArrow /> : <Pause />}\r\n                                </IconButton>\r\n                            </Tooltip>\r\n                        </Grid>\r\n                    </Grid>\r\n                </Toolbar>\r\n            </AppBar>\r\n            <GameTable grid={grid} />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default GameScreen;\r\n","import React, { useState } from \"react\";\nimport { Typography, makeStyles, Button, TextField } from \"@material-ui/core\";\n\nconst useStyles = makeStyles({\n    wrapper: {\n        width: \"100vw\",\n        height: \"100vh\",\n\n        display: \"flex\",\n        flexDirection: \"column\",\n    },\n    main: {\n        margin: \"auto\",\n\n        display: \"flex\",\n        flexShrink: 1,\n        flexDirection: \"column\",\n\n        textAlign: \"center\",\n    },\n    title: {\n        color: \"red\",\n    },\n});\n\nfunction GameOverScreen({ score, endGame, showRanking, snakeSpeed }) {\n    const classes = useStyles();\n    const [username, setUsername] = useState(\"\");\n    const [showTextField, setShowTextField] = useState(true);\n\n    const saveScore = () => {\n        setShowTextField(false);\n\n        const ranking = JSON.parse(localStorage.getItem(\"ranking\") || \"[]\");\n        ranking.push({ name: username, score, snakeSpeed });\n        localStorage.setItem(\"ranking\", JSON.stringify(ranking));\n\n        showRanking();\n    };\n\n    return (\n        <div className={classes.main}>\n            <Typography variant=\"h1\" className={classes.title}>\n                You lost!\n            </Typography>\n            <Button variant=\"contained\" onClick={endGame}>\n                Play again\n            </Button>\n            <Button variant=\"contained\" onClick={showRanking}>\n                Best scores\n            </Button>\n\n            <Typography>Your score is {score}</Typography>\n\n            {showTextField && (\n                <TextField\n                    label=\"Your name\"\n                    variant=\"outlined\"\n                    value={username}\n                    onChange={(event) => setUsername(event.target.value)}\n                    onKeyDown={(event) => event.key === \"Enter\" && saveScore()}\n                />\n            )}\n        </div>\n    );\n}\n\nexport default GameOverScreen;\n","import React from \"react\";\r\nimport {\r\n    Typography,\r\n    makeStyles,\r\n    CssBaseline,\r\n    Button,\r\n    TableRow,\r\n    TableHead,\r\n    TableContainer,\r\n    Table,\r\n    TableCell,\r\n    TableBody,\r\n} from \"@material-ui/core\";\r\n\r\nfunction RankingScreen({ startGameAgain }) {\r\n    const dataTable = JSON.parse(localStorage.getItem(\"ranking\") || \"[]\");\r\n    /*[\r\n        { name: \"Adam\", score: 75 },\r\n        { name: \"Monika\", score: 101 },\r\n        { name: \"Zosia\", score: 72 },\r\n    ];*/\r\n\r\n    dataTable.sort((a, b) => b.score - a.score);\r\n\r\n    return (\r\n        <div>\r\n            <div align=\"center\">\r\n                <Button variant=\"contained\" onClick={startGameAgain}>\r\n                    Play again\r\n                </Button>\r\n            </div>\r\n            <TableContainer>\r\n                <Table>\r\n                    <TableHead>\r\n                        <TableRow>\r\n                            <TableCell>Ranking</TableCell>\r\n                            <TableCell>Username</TableCell>\r\n                            <TableCell>Best score</TableCell>\r\n                            <TableCell>Your speed</TableCell>\r\n                        </TableRow>\r\n                    </TableHead>\r\n                    <TableBody>\r\n                        {dataTable.map(({ name, score, snakeSpeed }) => (\r\n                            <TableRow>\r\n                                <TableCell></TableCell>\r\n                                <TableCell>{name}</TableCell>\r\n                                <TableCell>{score}</TableCell>\r\n                                <TableCell>{snakeSpeed}</TableCell>\r\n                            </TableRow>\r\n                        ))}\r\n                    </TableBody>\r\n                </Table>\r\n            </TableContainer>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default RankingScreen;\r\n","import React, { useState } from \"react\";\r\nimport {\r\n    makeStyles,\r\n    CssBaseline,\r\n    createMuiTheme,\r\n    ThemeProvider,\r\n} from \"@material-ui/core\";\r\nimport { red, grey } from \"@material-ui/core/colors\";\r\nimport StartScreen from \"./StartScreen\";\r\nimport GameScreen from \"./GameScreen\";\r\nimport GameOverScreen from \"./GameOverScreen\";\r\nimport RankingScreen from \"./RankingScreen\";\r\n\r\nconst theme = createMuiTheme({\r\n    palette: {\r\n        primary: red,\r\n        secondary: grey,\r\n    },\r\n});\r\n\r\nconst useStyles = makeStyles({\r\n    wrapper: {\r\n        width: \"100vw\",\r\n        height: \"100vh\",\r\n\r\n        display: \"flex\",\r\n        flexDirection: \"column\",\r\n    },\r\n});\r\n\r\nfunction App() {\r\n    const classes = useStyles();\r\n    const [currentScreen, setCurrentScreen] = useState(\"startScreen\");\r\n    const [score, setScore] = useState(-1);\r\n    const [snakeSpeed, setSnakeSpeed] = useState(200);\r\n\r\n    return (\r\n        <ThemeProvider theme={theme}>\r\n            <div className={classes.wrapper}>\r\n                <CssBaseline />\r\n\r\n                {currentScreen === \"startScreen\" && (\r\n                    <StartScreen\r\n                        startGame={() => setCurrentScreen(\"gameScreen\")}\r\n                    />\r\n                )}\r\n                {currentScreen === \"gameScreen\" && (\r\n                    <GameScreen\r\n                        gameOver={(realScore) => {\r\n                            setScore(realScore);\r\n                            setCurrentScreen(\"gameOverScreen\");\r\n                        }}\r\n                        snakeSpeed={snakeSpeed}\r\n                        setSnakeSpeed={setSnakeSpeed}\r\n                    />\r\n                )}\r\n                {currentScreen === \"gameOverScreen\" && (\r\n                    <GameOverScreen\r\n                        score={score}\r\n                        endGame={() => {\r\n                            setCurrentScreen(\"gameScreen\");\r\n                            setSnakeSpeed(200);\r\n                        }}\r\n                        showRanking={() => setCurrentScreen(\"rankingScreen\")}\r\n                        snakeSpeed={snakeSpeed}\r\n                    />\r\n                )}\r\n                {currentScreen === \"rankingScreen\" && (\r\n                    <RankingScreen\r\n                        startGameAgain={() => setCurrentScreen(\"gameScreen\")}\r\n                    />\r\n                )}\r\n            </div>\r\n        </ThemeProvider>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./components/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}