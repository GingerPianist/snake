{"version":3,"sources":["components/StartScreen.js","components/GameTable.js","components/GameScreen.js","components/GameOverScreen.js","components/App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","wrapper","width","height","display","flexDirection","main","margin","flexShrink","title","color","StartScreen","startGame","classes","className","Typography","variant","Button","onClick","GameTable","grid","map","row","style","backgroundColor","GameScreen","gameOver","useState","setGrid","head","useRef","snakeGrid","direction","snakeLength","apple","pause","setPause","gameTick","current","oldGrid","gridCopy","i","j","Math","floor","random","keyPress","event","console","log","key","changePause","useEffect","tempGrid","snakeRow","push","handle","setInterval","document","addEventListener","clearInterval","removeEventListener","GameOverScreen","endGame","App","currentScreen","setCurrentScreen","CssBaseline","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.882ee157.chunk.js","sourcesContent":["import React from 'react'\r\nimport { Typography, makeStyles, CssBaseline, Button } from '@material-ui/core'\r\n\r\nconst useStyles = makeStyles({\r\n    wrapper: {\r\n        width: '100vw',\r\n        height: '100vh',\r\n\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n    },\r\n    main: {\r\n        margin: 'auto',\r\n\r\n        display: 'flex',\r\n        flexShrink: 1,\r\n        flexDirection: 'column',\r\n    },\r\n    title: {\r\n        color: 'red',\r\n    },\r\n})\r\n\r\nfunction StartScreen({ startGame }) {\r\n    const classes = useStyles()\r\n\r\n    return (\r\n        <div className={classes.main}>\r\n            <Typography variant=\"h1\" className={classes.title}>\r\n                Snake\r\n            </Typography>\r\n            <Button variant=\"contained\" onClick={startGame}>\r\n                Play\r\n            </Button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default StartScreen\r\n","import React from \"react\";\r\nimport { makeStyles } from \"@material-ui/core\";\r\n\r\nconst useStyles = makeStyles({});\r\n\r\nfunction GameTable({ grid }) {\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <div>\r\n            <table>\r\n                <tbody>\r\n                    {grid.map((row) => (\r\n                        <tr>\r\n                            {row.map((color) => (\r\n                                <td\r\n                                    style={{\r\n                                        height: 30,\r\n                                        width: 30,\r\n                                        backgroundColor: color,\r\n                                    }}\r\n                                />\r\n                            ))}\r\n                        </tr>\r\n                    ))}\r\n                </tbody>\r\n            </table>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default GameTable;\r\n","import React, { useEffect, useState, useRef } from \"react\";\r\nimport { makeStyles, Typography, Button } from \"@material-ui/core\";\r\nimport GameTable from \"./GameTable\";\r\n\r\nconst useStyles = makeStyles({\r\n    main: {\r\n        margin: \"auto\",\r\n        //textAlign: \"center\",\r\n    },\r\n});\r\n\r\nfunction GameScreen({ gameOver }) {\r\n    const classes = useStyles();\r\n    const height = 20;\r\n    const width = 40;\r\n    const [grid, setGrid] = useState([]);\r\n\r\n    const head = useRef([0, 0]);\r\n    const snakeGrid = useRef([]);\r\n    const direction = useRef(0);\r\n    const snakeLength = useRef(3);\r\n    const apple = useRef([0, 0]);\r\n    const [pause, setPause] = useState(0); //0 - nie ma pauzy 1-jest pauza\r\n\r\n    useEffect(() => {\r\n        apple.current[0] = Math.floor(Math.random() * height);\r\n        apple.current[1] = Math.floor(Math.random() * width);\r\n\r\n        const tempGrid = [];\r\n        snakeGrid.current = [];\r\n        for (let i = 0; i < height; i++) {\r\n            const row = [];\r\n            const snakeRow = [];\r\n            for (let j = 0; j < width; j++) {\r\n                if (i === apple.current[0] && j === apple.current[1])\r\n                    row.push(\"lightgreen\");\r\n                else row.push(\"lightgray\");\r\n                snakeRow.push(0);\r\n            }\r\n            tempGrid.push(row);\r\n            snakeGrid.current.push(snakeRow);\r\n        }\r\n        setGrid(tempGrid);\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        let handle;\r\n        if (pause === 0) handle = setInterval(gameTick, 200);\r\n        document.addEventListener(\"keydown\", keyPress);\r\n\r\n        return () => {\r\n            clearInterval(handle);\r\n            document.removeEventListener(\"keydown\", keyPress);\r\n        };\r\n    }, [pause]);\r\n\r\n    /*function setCell(row, column, color) {\r\n        //USUNĄĆ TĘ FUNKCJĘ I WŁOŻYĆ JĄ DO GAMETICKA!\r\n        const gridCopy = [...grid];\r\n        gridCopy[row] = [...gridCopy[row]]; //zmieniamy wskaznik do zmienionego wiersza tak, aby poinformowac Reacta o zmianie wartosci\r\n        gridCopy[row][column] = color;\r\n        setGrid(gridCopy);\r\n        console.log(row, column, color, gridCopy);\r\n    }*/\r\n\r\n    function gameTick() {\r\n        switch (direction.current) {\r\n            case 0: //w prawo\r\n                head.current[1]++;\r\n                break;\r\n            case 1: //w gore\r\n                head.current[0]--;\r\n                break;\r\n            case 2: //w lewo\r\n                head.current[1]--;\r\n                break;\r\n            case 3: //w dol\r\n                head.current[0]++;\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        head.current[0] += height;\r\n        head.current[0] %= height;\r\n\r\n        head.current[1] += width;\r\n        head.current[1] %= width;\r\n\r\n        if (snakeGrid.current[head.current[0]][head.current[1]] !== 0) {\r\n            gameOver();\r\n        } else {\r\n            setGrid((oldGrid) => {\r\n                const gridCopy = [...oldGrid];\r\n\r\n                for (let i = 0; i < height; i++) {\r\n                    for (let j = 0; j < width; j++) {\r\n                        if (snakeGrid.current[i][j] !== 0) {\r\n                            --snakeGrid.current[i][j];\r\n                            if (snakeGrid.current[i][j] === 0) {\r\n                                gridCopy[i] = [...oldGrid[i]]; //zmieniamy wskaznik do zmienionego wiersza tak, aby poinformowac Reacta o zmianie wartosci\r\n                                gridCopy[i][j] = \"lightgray\";\r\n                                //setGrid(gridCopy);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n\r\n                /*\r\n                1) sprawdź czy głowa === jabłuszko\r\n                2) zwiększ długość\r\n                3) zrób nowe jabłuszko w miejscu gdzie nie ma węża\r\n                4) dodaj nowe jabłuszko\r\n                */\r\n\r\n                snakeGrid.current[head.current[0]][head.current[1]] =\r\n                    snakeLength.current;\r\n\r\n                if (\r\n                    head.current[0] === apple.current[0] &&\r\n                    head.current[1] === apple.current[1]\r\n                ) {\r\n                    snakeLength.current++;\r\n\r\n                    if (snakeLength.current < height * width) {\r\n                        do {\r\n                            apple.current[0] = Math.floor(\r\n                                Math.random() * height\r\n                            );\r\n                            apple.current[1] = Math.floor(\r\n                                Math.random() * width\r\n                            );\r\n                        } while (\r\n                            snakeGrid.current[apple.current[0]][\r\n                                apple.current[1]\r\n                            ] !== 0\r\n                        );\r\n\r\n                        gridCopy[apple.current[0]] = [\r\n                            ...gridCopy[apple.current[0]],\r\n                        ];\r\n                        gridCopy[apple.current[0]][apple.current[1]] =\r\n                            \"lightgreen\";\r\n                    } else {\r\n                        apple.current = [-1, -1];\r\n                    }\r\n                }\r\n\r\n                //setCell(head.current[0], head.current[1], \"red\");\r\n                //const gridCopy = [...grid];\r\n                gridCopy[head.current[0]] = [...gridCopy[head.current[0]]]; //zmieniamy wskaznik do zmienionego wiersza tak, aby poinformowac Reacta o zmianie wartosci\r\n                gridCopy[head.current[0]][head.current[1]] = \"red\";\r\n\r\n                return gridCopy;\r\n            });\r\n        }\r\n    }\r\n\r\n    function keyPress(event) {\r\n        console.log(event.key);\r\n        switch (event.key) {\r\n            case \"ArrowRight\":\r\n                direction.current = 0;\r\n                break;\r\n            case \"ArrowUp\":\r\n                direction.current = 1;\r\n                break;\r\n            case \"ArrowLeft\":\r\n                direction.current = 2;\r\n                break;\r\n            case \"ArrowDown\":\r\n                direction.current = 3;\r\n                break;\r\n            case \"p\":\r\n                changePause();\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n    function changePause() {\r\n        if (pause === 1) setPause(0);\r\n        else setPause(1);\r\n    }\r\n\r\n    return (\r\n        <div className={classes.main}>\r\n            <Button variant=\"contained\" onClick={changePause}>\r\n                {pause === 1 ? \"Wznów\" : \"Pauza\"}\r\n            </Button>\r\n            <Typography>Twój wynik to: {snakeLength.current}</Typography>\r\n\r\n            <GameTable grid={grid} />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default GameScreen;\r\n","import React from 'react'\nimport { Typography, makeStyles, Button } from '@material-ui/core'\n\nconst useStyles = makeStyles({\n    wrapper: {\n        width: '100vw',\n        height: '100vh',\n\n        display: 'flex',\n        flexDirection: 'column',\n    },\n    main: {\n        margin: 'auto',\n\n        display: 'flex',\n        flexShrink: 1,\n        flexDirection: 'column',\n    },\n    title: {\n        color: 'red',\n    },\n})\n\nfunction GameOverScreen({ endGame }) {\n    const classes = useStyles()\n\n    return (\n        <div className={classes.main}>\n            <Typography variant=\"h1\" className={classes.title}>\n                You lost!\n            </Typography>\n            <Button variant=\"contained\" onClick={endGame}>\n                Play again\n            </Button>\n        </div>\n    )\n}\n\nexport default GameOverScreen\n","import React, { useState } from 'react'\r\nimport { makeStyles, CssBaseline } from '@material-ui/core'\r\nimport StartScreen from './StartScreen'\r\nimport GameScreen from './GameScreen'\r\nimport GameOverScreen from './GameOverScreen'\r\n\r\nconst useStyles = makeStyles({\r\n    wrapper: {\r\n        width: '100vw',\r\n        height: '100vh',\r\n\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n    },\r\n})\r\n\r\nfunction App() {\r\n    const classes = useStyles()\r\n    const [currentScreen, setCurrentScreen] = useState('startScreen')\r\n\r\n    return (\r\n        <div className={classes.wrapper}>\r\n            <CssBaseline />\r\n            {currentScreen === 'startScreen' && (\r\n                <StartScreen startGame={() => setCurrentScreen('gameScreen')} />\r\n            )}\r\n            {currentScreen === 'gameScreen' && (\r\n                <GameScreen\r\n                    gameOver={() => setCurrentScreen('gameOverScreen')}\r\n                />\r\n            )}\r\n            {currentScreen === 'gameOverScreen' && (\r\n                <GameOverScreen\r\n                    endGame={() => setCurrentScreen('gameScreen')}\r\n                />\r\n            )}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default App\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./components/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}